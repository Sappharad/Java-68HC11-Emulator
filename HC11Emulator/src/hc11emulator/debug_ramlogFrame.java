/*
 * debug_ramlogFrame.java
 *
 * Created on December 28, 2006, 2:59 PM
 *
 * @author Paul Kratt
 */

package hc11emulator;

import javax.swing.table.DefaultTableModel;

public class debug_ramlogFrame extends javax.swing.JFrame implements hc11_ramTrapper {
    private int mytrap; //The address this window is trapping
    private hc11_Device device; //The hc11 device we're trapping
    
    /** Creates new form debug_ramlogFrame, trapping the address specified */
    public debug_ramlogFrame(int addr, hc11_Device dev) {
        initComponents();
        
        mytrap = addr;
        device = dev;
        lblLogAddr.setText(Integer.toHexString(mytrap));
    }
    
    /** We have been notified that a write trap has been hit.
     *@param trapaddr The address that was trapped
     *@param instaddr The address of the instruction that fell into our trap.
     **/
    public void writeTrap(int trapaddr, int instraddr){
        DefaultTableModel table = (DefaultTableModel)tblLog.getModel();
        
        if(chkWriteLog.isSelected()){
            String[] nxtRow = new String[3];
            nxtRow[0] = "W";
            nxtRow[1] = Integer.toHexString(instraddr);
            nxtRow[2] = Integer.toHexString(device.getMemSilent(trapaddr));
            table.addRow(nxtRow);
        }
    }
    
    /** We have been notified that a read trap has been hit.
     *@param trapaddr The address that was trapped
     *@param instaddr The address of the instruction that fell into our trap.
     **/
    public void readTrap(int trapaddr, int instraddr){
        DefaultTableModel table = (DefaultTableModel)tblLog.getModel();
        
        if(chkReadLog.isSelected()){
            String[] nxtRow = new String[3];
            nxtRow[0] = "R";
            nxtRow[1] = Integer.toHexString(instraddr);
            nxtRow[2] = Integer.toHexString(device.getMemSilent(trapaddr));
            table.addRow(nxtRow);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblLogging = new javax.swing.JLabel();
        lblLogAddr = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        chkReadLog = new javax.swing.JCheckBox();
        chkWriteLog = new javax.swing.JCheckBox();
        jspLogScroll = new javax.swing.JScrollPane();
        tblLog = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HC11 RAM access log");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblLogging.setText("Logging ram access to location:");

        lblLogAddr.setText("0xFFFF");

        btnClear.setText("Clear list");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        chkReadLog.setText("Log reads");
        chkReadLog.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkReadLog.setMargin(new java.awt.Insets(0, 0, 0, 0));

        chkWriteLog.setSelected(true);
        chkWriteLog.setText("Log writes");
        chkWriteLog.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkWriteLog.setMargin(new java.awt.Insets(0, 0, 0, 0));

        tblLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mode", "Address", "Value"
            }
        ));
        jspLogScroll.setViewportView(tblLog);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jspLogScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(lblLogging)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblLogAddr))
                    .add(layout.createSequentialGroup()
                        .add(chkReadLog)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(chkWriteLog)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 195, Short.MAX_VALUE)
                        .add(btnClear)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblLogging)
                    .add(lblLogAddr))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jspLogScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chkReadLog)
                    .add(chkWriteLog)
                    .add(btnClear))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        device.removeTrap(this);
    }//GEN-LAST:event_formWindowClosing

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        DefaultTableModel table = (DefaultTableModel)tblLog.getModel();
        while(table.getRowCount()>0)
            table.removeRow(0);
    }//GEN-LAST:event_btnClearActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JCheckBox chkReadLog;
    private javax.swing.JCheckBox chkWriteLog;
    private javax.swing.JScrollPane jspLogScroll;
    private javax.swing.JLabel lblLogAddr;
    private javax.swing.JLabel lblLogging;
    private javax.swing.JTable tblLog;
    // End of variables declaration//GEN-END:variables
    
}
