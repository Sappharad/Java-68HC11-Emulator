/*
 * fox11_LCDscreen.java
 *
 * Created on August 25, 2006, 10:18 PM
 *
 * @author  Paul Kratt
 */

package hc11emulator;

public class fox11_LCDscreen extends javax.swing.JFrame implements hc11_ramTrapper{
    int row=0,col=0; //Row is the line, column is the current nybble
    private hc11_Device device; //The hc11 device we're acting as an LCD display for.
    private boolean firstuse; //Is this the first time the LCD is being written to since it was opened?
    
    /** Creates new form fox11_LCDscreen */
    public fox11_LCDscreen(hc11_Device board) {
        initComponents();
        device=board;
        
        device.addTrap(0x1401,this);
        firstuse=true;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlLCD = new hc11emulator.fox11_lcdPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LCD Screen");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlLCD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlLCD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        device.removeTrap(this);
    }//GEN-LAST:event_formWindowClosed
    
    public void writeTrap(int trapaddr, int instraddr) {
        int data = device.getMemSilent(trapaddr);
        int command = data&0xF;
        data=(data>>4)&0xF;
        int lastdata=0;
        
        //Note: Data actually sent to the LCD screen does not seem to match anything in either of the
        //LCD specification documents that came with the FOX11 board. Therefore, all of the stuff
        //in this function is just guessed based on logs of the data actually sent to the LCD.
        //Due to this, the emulated LCD may not accurately mimic the real thing.
        
        if(firstuse){
            //Clear the LCD
            for(int i=0; i<pnlLCD.line[0].length;i++){
                pnlLCD.line[0][i] = (byte)0;
                pnlLCD.line[1][i] = (byte)0;
            }
            firstuse=false;
        }
        
        if(command==0){
            //Tell the LCD to be ready for a new command?
        }
        else if(command==1){
            //This command is sent when outputting data to the LCD screen. I'm not going to use it at all.
        }
        else if(command==2){
            //Cursor commands?
            if(lastdata==0x8 || lastdata==0xC){
                col=data;
                lastdata=0;
            }
            if(data==0x8){
                //Line 1
                row=0;
                lastdata=data;
            }
            else if(data==0xC){
                //Line 2
                row=1;
                lastdata=data;
            }
        }
        else if(command==3){
            //Update the current nybble, and advance the cursor
            int value = pnlLCD.line[row][col/2];
            if(col%2==0){
                value=(data<<4)+(value&0xF);
            }else{
                value=(value&0xF0)+data;
            }
            pnlLCD.line[row][col/2] = (byte)(value);
            col++;
            if(col%2==0){
                pnlLCD.repaint(); //A new byte has been written. Tell the LCD to repaint next time it get's a chance.
            }
            if(col==pnlLCD.line[0].length*2)
                col=0; //Loop to the beginning of the line, because I don't know what would happen otherwise.
        }
    }

    public void readTrap(int trapaddr, int instraddr) {
        //I don't need a read trap on this.
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private hc11emulator.fox11_lcdPanel pnlLCD;
    // End of variables declaration//GEN-END:variables
    
}
